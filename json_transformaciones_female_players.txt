[
  {
    "op": "core/column-removal",
    "columnName": "dob",
    "description": "Remove column dob"
  },
  {
    "op": "core/column-removal",
    "columnName": "real_face",
    "description": "Remove column real_face"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "attacking_heading_accuracy",
    "newColumnName": "heading_accuracy",
    "description": "Rename column attacking_heading_accuracy to heading_accuracy"
  },
  {
    "op": "core/column-removal",
    "columnName": "player_face_url",
    "description": "Remove column player_face_url"
  },
  {
    "op": "core/column-removal",
    "columnName": "club_logo_url",
    "description": "Remove column club_logo_url"
  },
  {
    "op": "core/column-removal",
    "columnName": "club_flag_url",
    "description": "Remove column club_flag_url"
  },
  {
    "op": "core/column-removal",
    "columnName": "nation_logo_url",
    "description": "Remove column nation_logo_url"
  },
  {
    "op": "core/column-removal",
    "columnName": "nation_flag_url",
    "description": "Remove column nation_flag_url"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sofifa_id",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column sofifa_id using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_ball_control",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_ball_control using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_positions",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column player_positions using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "long_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column long_name using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "short_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column short_name using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_url",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column player_url using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "age",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column age using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "wage_eur",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column wage_eur using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "value_eur",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column value_eur using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "potential",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column potential using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "overall",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column overall using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "league_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column league_name using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_name using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_team_id",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_team_id using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "weight_kg",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column weight_kg using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "height_cm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column height_cm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_joined",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_joined using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_loaned_from",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_loaned_from using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_jersey_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_jersey_number using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_position",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_position using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "league_level",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column league_level using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_position",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nation_position using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_team_id",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nation_team_id using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nationality_name",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nationality_name using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nationality_id",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nationality_id using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_contract_valid_until",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_contract_valid_until using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "international_reputation",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column international_reputation using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_moves",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_moves using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "weak_foot",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column weak_foot using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "preferred_foot",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column preferred_foot using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_jersey_number",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nation_jersey_number using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_traits",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column player_traits using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_tags",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column player_tags using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "release_clause_eur",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column release_clause_eur using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "body_type",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column body_type using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "work_rate",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column work_rate using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_acceleration",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_acceleration using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dribbling",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column dribbling using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "passing",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column passing using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "shooting",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column shooting using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pace",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pace using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "heading_accuracy",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column heading_accuracy using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_finishing",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_finishing using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_crossing",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_crossing using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physic",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column physic using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_fk_accuracy",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_fk_accuracy using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_curve",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_curve using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_dribbling",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_dribbling using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_volleys",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_volleys using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_short_passing",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_short_passing using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_balance",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_balance using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_reactions",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_reactions using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_agility",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_agility using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_sprint_speed",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_sprint_speed using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_long_passing",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_long_passing using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_stamina",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_stamina using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_jumping",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_jumping using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_shot_power",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_shot_power using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_strength",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_strength using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_long_shots",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_long_shots using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_aggression",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_aggression using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_interceptions",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_interceptions using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_positioning",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_positioning using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_vision",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_vision using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_penalties",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_penalties using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_composure",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_composure using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_marking_awareness",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_marking_awareness using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_standing_tackle",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_standing_tackle using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_sliding_tackle",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_sliding_tackle using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_diving",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_diving using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_handling",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_handling using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_kicking",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_kicking using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_positioning",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_positioning using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_reflexes",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_reflexes using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_speed",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_speed using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ls",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ls using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "st",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column st using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rs",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rs using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lw",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lw using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lf",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lf using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cf",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cf using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rf",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rf using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rw",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rw using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lam",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lam using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cam",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cam using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ram",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ram using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lwb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lwb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ldm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ldm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cdm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cdm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rdm",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rdm using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rwb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rwb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rb",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rb using expression value.trim()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "gk",
    "expression": "value.trim()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column gk using expression value.trim()"
  },
  {
    "op": "core/multivalued-cell-split",
    "columnName": "player_positions",
    "keyColumnName": "sofifa_id",
    "mode": "separator",
    "separator": ",",
    "regex": false,
    "description": "Split multi-valued cells in column player_positions"
  },
  {
    "op": "core/multivalued-cell-split",
    "columnName": "player_tags",
    "keyColumnName": "sofifa_id",
    "mode": "separator",
    "separator": ",",
    "regex": false,
    "description": "Split multi-valued cells in column player_tags"
  },
  {
    "op": "core/multivalued-cell-split",
    "columnName": "player_traits",
    "keyColumnName": "sofifa_id",
    "mode": "separator",
    "separator": ",",
    "regex": false,
    "description": "Split multi-valued cells in column player_traits"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "overall",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column overall using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "overall",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column overall using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "potential",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column potential using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "height_cm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column height_cm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "weight_kg",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column weight_kg using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "age",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column age using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "wage_eur",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column wage_eur using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "value_eur",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column value_eur using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "international_reputation",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column international_reputation using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_moves",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_moves using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "weak_foot",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column weak_foot using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "nation_jersey_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column nation_jersey_number using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "club_jersey_number",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_jersey_number using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "dribbling",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column dribbling using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "passing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column passing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "shooting",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column shooting using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "pace",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column pace using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "release_clause_eur",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column release_clause_eur using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "heading_accuracy",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column heading_accuracy using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "attacking_finishing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_finishing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "attacking_crossing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_crossing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "physic",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column physic using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "defending",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_fk_accuracy",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_fk_accuracy using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_curve",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_curve using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_dribbling",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_dribbling using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "attacking_volleys",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_volleys using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "attacking_short_passing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column attacking_short_passing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "movement_agility",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_agility using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "movement_sprint_speed",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_sprint_speed using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "movement_acceleration",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_acceleration using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_ball_control",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_ball_control using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "skill_long_passing",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column skill_long_passing using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "power_stamina",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_stamina using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "power_jumping",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_jumping using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "power_shot_power",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_shot_power using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "movement_balance",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_balance using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "movement_reactions",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column movement_reactions using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_positioning",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_positioning using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_interceptions",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_interceptions using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_aggression",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_aggression using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "power_long_shots",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_long_shots using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "power_strength",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column power_strength using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "defending_standing_tackle",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_standing_tackle using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "defending_marking_awareness",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_marking_awareness using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_composure",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_composure using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_penalties",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_penalties using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "mentality_vision",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column mentality_vision using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_positioning",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_positioning using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_kicking",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_kicking using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_handling",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_handling using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_diving",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_diving using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "defending_sliding_tackle",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column defending_sliding_tackle using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rs",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rs using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "st",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column st using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "ls",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ls using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_speed",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_speed using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "goalkeeping_reflexes",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column goalkeeping_reflexes using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rw",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rw using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rf",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rf using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "cf",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cf using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lf",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lf using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lw",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lw using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lcm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "ram",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ram using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "cam",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cam using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lam",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lam using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "ldm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ldm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lwb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lwb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rcm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "cm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lcb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "lb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rwb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rwb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rdm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rdm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "cdm",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cdm using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "gk",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column gk using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "rcb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcb using expression value.toNumber()"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "cb",
    "expression": "value.toNumber()",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cb using expression value.toNumber()"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "baseColumnName": "long_name",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "Reconciliation_wikidata",
    "columnInsertIndex": 4,
    "description": "Create column Reconciliation_wikidata at index 4 based on column long_name using expression grel:value"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [],
      "mode": "record-based"
    },
    "columnName": "Reconciliation_wikidata",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q5",
        "name": "human"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column Reconciliation_wikidata to type Q5"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Ashley Elizabeth Marie Lawrence",
    "judgment": "matched",
    "match": {
      "id": "Q15727786",
      "name": "Ashley Lawrence",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Ashley Lawrence (Q15727786) for cells containing \"Ashley Elizabeth Marie Lawrence\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Quinn Quinn",
    "judgment": "matched",
    "match": {
      "id": "Q15906007",
      "name": "Quinn",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Quinn (Q15906007) for cells containing \"Quinn Quinn\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Dominique Johanna Anna Petrone Janssen",
    "judgment": "matched",
    "match": {
      "id": "Q16175760",
      "name": "Dominique Janssen",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Dominique Janssen (Q16175760) for cells containing \"Dominique Johanna Anna Petrone Janssen\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Lineth Enid Fabienne Beerensteyn",
    "judgment": "matched",
    "match": {
      "id": "Q19720875",
      "name": "Lineth Beerensteyn",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Lineth Beerensteyn (Q19720875) for cells containing \"Lineth Enid Fabienne Beerensteyn\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Andreia Martins Faria",
    "judgment": "matched",
    "match": {
      "id": "Q82380321",
      "name": "Andreia Faria",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Andreia Faria (Q82380321) for cells containing \"Andreia Martins Faria\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Telma Raquel Velosa Encarnaçao",
    "judgment": "matched",
    "match": {
      "id": "Q98067850",
      "name": "Telma Encarnação",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Telma Encarnação (Q98067850) for cells containing \"Telma Raquel Velosa Encarnaçao\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Mary Fowler",
    "judgment": "matched",
    "match": {
      "id": "Q60736234",
      "name": "Mary Fowler",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Mary Fowler (Q60736234) for cells containing \"Mary Fowler\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "similarValue": "Catarina Isabel Silva Amado",
    "judgment": "matched",
    "match": {
      "id": "Q83209443",
      "name": "Catarina Amado",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Catarina Amado (Q83209443) for cells containing \"Catarina Isabel Silva Amado\" in column Reconciliation_wikidata"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q5",
        "name": "human"
      },
      "autoMatch": true,
      "columnDetails": [
        {
          "column": "short_name",
          "propertyName": "name",
          "propertyID": "P2561"
        }
      ],
      "limit": 0
    },
    "description": "Reconcile cells in column Reconciliation_wikidata to type Q5"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Reconciliation_wikidata",
    "expression": "grel:cell.recon.match.id",
    "onError": "set-to-blank",
    "newColumnName": "same_as_wikidata_Id",
    "columnInsertIndex": 5,
    "description": "Create column same_as_wikidata_Id at index 5 based on column Reconciliation_wikidata using expression grel:cell.recon.match.id"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q5",
        "name": "human"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column Reconciliation_wikidata to type Q5"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "same_as_wikidata_Id",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "wikidata_aux",
    "columnInsertIndex": 6,
    "description": "Create column wikidata_aux at index 6 based on column same_as_wikidata_Id using expression grel:value"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "wikidata_aux",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q5",
        "name": "human"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column wikidata_aux to type Q5"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "wikidata_aux",
    "toColumnNames": [
      "Reconciliation_wikidata"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column wikidata_aux to Reconciliation_wikidata"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "same_as_wikidata_Id",
    "toColumnNames": [
      "Reconciliation_wikidata"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column same_as_wikidata_Id to Reconciliation_wikidata"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "wikidata_aux",
    "toColumnNames": [
      "Reconciliation_wikidata"
    ],
    "judgments": [
      "new"
    ],
    "applyToJudgedCells": false,
    "description": "Copy recon judgments from column wikidata_aux to Reconciliation_wikidata"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(unreconciled)",
                "l": "(unreconciled)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q5",
        "name": "human"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column Reconciliation_wikidata to type Q5"
  },
  {
    "op": "core/column-removal",
    "columnName": "wikidata_aux",
    "description": "Remove column wikidata_aux"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "matched",
                "l": "matched"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "record-based"
    },
    "columnName": "sofifa_id",
    "description": "Fill down cells in column sofifa_id"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(blank)",
                "l": "(blank)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "record-based"
    },
    "columnName": "player_positions",
    "description": "Fill down cells in column player_positions"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(blank)",
                "l": "(blank)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "record-based"
    },
    "columnName": "player_url",
    "description": "Fill down cells in column player_url"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "Reconciliation_wikidata: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "Reconciliation_wikidata",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "(blank)",
                "l": "(blank)"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "record-based"
    },
    "columnName": "short_name",
    "description": "Fill down cells in column short_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_url",
    "description": "Fill down cells in column player_url"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "short_name",
    "description": "Fill down cells in column short_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "gk",
    "description": "Fill down cells in column gk"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rb",
    "description": "Fill down cells in column rb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcb",
    "description": "Fill down cells in column rcb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cb",
    "description": "Fill down cells in column cb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcb",
    "description": "Fill down cells in column lcb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lb",
    "description": "Fill down cells in column lb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rwb",
    "description": "Fill down cells in column rwb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rdm",
    "description": "Fill down cells in column rdm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cdm",
    "description": "Fill down cells in column cdm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ldm",
    "description": "Fill down cells in column ldm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lwb",
    "description": "Fill down cells in column lwb"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rm",
    "description": "Fill down cells in column rm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcm",
    "description": "Fill down cells in column rcm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cm",
    "description": "Fill down cells in column cm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcm",
    "description": "Fill down cells in column lcm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lm",
    "description": "Fill down cells in column lm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ram",
    "description": "Fill down cells in column ram"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cam",
    "description": "Fill down cells in column cam"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lam",
    "description": "Fill down cells in column lam"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rw",
    "description": "Fill down cells in column rw"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rf",
    "description": "Fill down cells in column rf"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cf",
    "description": "Fill down cells in column cf"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lf",
    "description": "Fill down cells in column lf"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lw",
    "description": "Fill down cells in column lw"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rs",
    "description": "Fill down cells in column rs"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "st",
    "description": "Fill down cells in column st"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ls",
    "description": "Fill down cells in column ls"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_speed",
    "description": "Fill down cells in column goalkeeping_speed"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_reflexes",
    "description": "Fill down cells in column goalkeeping_reflexes"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_positioning",
    "description": "Fill down cells in column goalkeeping_positioning"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_kicking",
    "description": "Fill down cells in column goalkeeping_kicking"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_handling",
    "description": "Fill down cells in column goalkeeping_handling"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "goalkeeping_diving",
    "description": "Fill down cells in column goalkeeping_diving"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_sliding_tackle",
    "description": "Fill down cells in column defending_sliding_tackle"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_standing_tackle",
    "description": "Fill down cells in column defending_standing_tackle"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending_marking_awareness",
    "description": "Fill down cells in column defending_marking_awareness"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_composure",
    "description": "Fill down cells in column mentality_composure"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_penalties",
    "description": "Fill down cells in column mentality_penalties"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_vision",
    "description": "Fill down cells in column mentality_vision"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_positioning",
    "description": "Fill down cells in column mentality_positioning"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_interceptions",
    "description": "Fill down cells in column mentality_interceptions"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "mentality_aggression",
    "description": "Fill down cells in column mentality_aggression"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_long_shots",
    "description": "Fill down cells in column power_long_shots"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_strength",
    "description": "Fill down cells in column power_strength"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_stamina",
    "description": "Fill down cells in column power_stamina"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_jumping",
    "description": "Fill down cells in column power_jumping"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "power_shot_power",
    "description": "Fill down cells in column power_shot_power"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_balance",
    "description": "Fill down cells in column movement_balance"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_reactions",
    "description": "Fill down cells in column movement_reactions"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_agility",
    "description": "Fill down cells in column movement_agility"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_sprint_speed",
    "description": "Fill down cells in column movement_sprint_speed"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "movement_acceleration",
    "description": "Fill down cells in column movement_acceleration"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_ball_control",
    "description": "Fill down cells in column skill_ball_control"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_long_passing",
    "description": "Fill down cells in column skill_long_passing"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_fk_accuracy",
    "description": "Fill down cells in column skill_fk_accuracy"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_curve",
    "description": "Fill down cells in column skill_curve"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_dribbling",
    "description": "Fill down cells in column skill_dribbling"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_volleys",
    "description": "Fill down cells in column attacking_volleys"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_short_passing",
    "description": "Fill down cells in column attacking_short_passing"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "heading_accuracy",
    "description": "Fill down cells in column heading_accuracy"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_finishing",
    "description": "Fill down cells in column attacking_finishing"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "attacking_crossing",
    "description": "Fill down cells in column attacking_crossing"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "physic",
    "description": "Fill down cells in column physic"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "defending",
    "description": "Fill down cells in column defending"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "dribbling",
    "description": "Fill down cells in column dribbling"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "passing",
    "description": "Fill down cells in column passing"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "shooting",
    "description": "Fill down cells in column shooting"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "pace",
    "description": "Fill down cells in column pace"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_traits",
    "description": "Fill down cells in column player_traits"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_tags",
    "description": "Fill down cells in column player_tags"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "release_clause_eur",
    "description": "Fill down cells in column release_clause_eur"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "body_type",
    "description": "Fill down cells in column body_type"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "work_rate",
    "description": "Fill down cells in column work_rate"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "international_reputation",
    "description": "Fill down cells in column international_reputation"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "skill_moves",
    "description": "Fill down cells in column skill_moves"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "weak_foot",
    "description": "Fill down cells in column weak_foot"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "preferred_foot",
    "description": "Fill down cells in column preferred_foot"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_jersey_number",
    "description": "Fill down cells in column nation_jersey_number"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_position",
    "description": "Fill down cells in column nation_position"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nation_team_id",
    "description": "Fill down cells in column nation_team_id"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nationality_name",
    "description": "Fill down cells in column nationality_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "nationality_id",
    "description": "Fill down cells in column nationality_id"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_contract_valid_until",
    "description": "Fill down cells in column club_contract_valid_until"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_joined",
    "description": "Fill down cells in column club_joined"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_loaned_from",
    "description": "Fill down cells in column club_loaned_from"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_jersey_number",
    "description": "Fill down cells in column club_jersey_number"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_position",
    "description": "Fill down cells in column club_position"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "league_level",
    "description": "Fill down cells in column league_level"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "league_name",
    "description": "Fill down cells in column league_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_name",
    "description": "Fill down cells in column club_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_team_id",
    "description": "Fill down cells in column club_team_id"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "weight_kg",
    "description": "Fill down cells in column weight_kg"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "height_cm",
    "description": "Fill down cells in column height_cm"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "age",
    "description": "Fill down cells in column age"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "wage_eur",
    "description": "Fill down cells in column wage_eur"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "value_eur",
    "description": "Fill down cells in column value_eur"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "potential",
    "description": "Fill down cells in column potential"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "overall",
    "description": "Fill down cells in column overall"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_positions",
    "description": "Fill down cells in column player_positions"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "same_as_wikidata_Id",
    "description": "Fill down cells in column same_as_wikidata_Id"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "Reconciliation_wikidata",
    "description": "Fill down cells in column Reconciliation_wikidata"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "long_name",
    "description": "Fill down cells in column long_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "short_name",
    "description": "Fill down cells in column short_name"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "player_url",
    "description": "Fill down cells in column player_url"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "sofifa_id",
    "description": "Fill down cells in column sofifa_id"
  },
  {
    "op": "core/extend-reconciled-data",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Reconciliation_wikidata",
    "endpoint": "https://wikidata.reconci.link/en/api",
    "identifierSpace": "http://www.wikidata.org/entity/",
    "schemaSpace": "http://www.wikidata.org/prop/direct/",
    "extension": {
      "properties": [
        {
          "id": "P54",
          "name": null,
          "settings": {
            "limit": "1",
            "rank": "best",
            "references": "any"
          }
        }
      ]
    },
    "columnInsertIndex": 5,
    "description": "Extend data at index 5 based on column Reconciliation_wikidata"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "fromColumnName": "member of sports team",
    "toColumnNames": [
      "club_name"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column member of sports team to club_name"
  },
  {
    "op": "core/column-removal",
    "columnName": "member of sports team",
    "description": "Remove column member of sports team"
  },
  {
    "op": "core/extend-reconciled-data",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "Reconciliation_wikidata",
    "endpoint": "https://wikidata.reconci.link/en/api",
    "identifierSpace": "http://www.wikidata.org/entity/",
    "schemaSpace": "http://www.wikidata.org/prop/direct/",
    "extension": {
      "properties": [
        {
          "id": "P54",
          "name": null,
          "settings": {
            "limit": "1",
            "rank": "best",
            "references": "any"
          }
        }
      ]
    },
    "columnInsertIndex": 5,
    "description": "Extend data at index 5 based on column Reconciliation_wikidata"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "Reconciliation_wikidata",
    "newColumnName": "reconciliation_wikidata",
    "description": "Rename column Reconciliation_wikidata to reconciliation_wikidata"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lam",
    "expression": "grel:value.split(\"+\")",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lam using expression grel:value.split(\"+\")"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lam",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lam by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lam 1",
    "expression": "grel:value + cells['lam 2'].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lam 1 using expression grel:value + cells['lam 2'].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lam 2",
    "description": "Remove column lam 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lam 1",
    "newColumnName": "lam",
    "description": "Rename column lam 1 to lam"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ls",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column ls by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ls 1",
    "expression": "grel:value + cells[\"ls 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ls 1 using expression grel:value + cells[\"ls 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "ls 2",
    "description": "Remove column ls 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "ls 1",
    "newColumnName": "ls",
    "description": "Rename column ls 1 to ls"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "st",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column st by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "st 1",
    "expression": "grel:value + cells[\"st 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column st 1 using expression grel:value + cells[\"st 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "st 2",
    "description": "Remove column st 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "st 1",
    "newColumnName": "st",
    "description": "Rename column st 1 to st"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rs",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rs by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rs 1",
    "expression": "grel:value + cells[\"rs 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rs 1 using expression grel:value + cells[\"rs 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rs 2",
    "description": "Remove column rs 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rs 1",
    "newColumnName": "rs",
    "description": "Rename column rs 1 to rs"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cam",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column cam by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cam 1",
    "expression": "grel:value + cells[\"cam 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cam 1 using expression grel:value + cells[\"cam 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "cam 2",
    "description": "Remove column cam 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "cam 1",
    "newColumnName": "cam",
    "description": "Rename column cam 1 to cam"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ram",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column ram by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ram 1",
    "expression": "grel:value + cells[\"ram 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ram 1 using expression grel:value + cells[\"ram 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "ram 2",
    "description": "Remove column ram 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "ram 1",
    "newColumnName": "ram",
    "description": "Rename column ram 1 to ram"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lm 1",
    "expression": "grel:value + cells[\"lm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lm 1 using expression grel:value + cells[\"lm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lm 2",
    "description": "Remove column lm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lm 1",
    "newColumnName": "lm",
    "description": "Rename column lm 1 to lm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lcm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcm 1",
    "expression": "grel:value + cells[\"lcm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcm 1 using expression grel:value + cells[\"lcm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lcm 2",
    "description": "Remove column lcm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lcm 1",
    "newColumnName": "lcm",
    "description": "Rename column lcm 1 to lcm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column cm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cm 1",
    "expression": "grel:value + cells[\"cm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cm 1 using expression grel:value + cells[\"cm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "cm 2",
    "description": "Remove column cm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "cm 1",
    "newColumnName": "cm",
    "description": "Rename column cm 1 to cm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rcm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcm 1",
    "expression": "grel:value + cells[\"rcm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcm 1 using expression grel:value + cells[\"rcm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rcm 2",
    "description": "Remove column rcm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rcm 1",
    "newColumnName": "rcm",
    "description": "Rename column rcm 1 to rcm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rm 1",
    "expression": "grel:value + cells[\"rm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rm 1 using expression grel:value + cells[\"rm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rm 2",
    "description": "Remove column rm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rm 1",
    "newColumnName": "rm",
    "description": "Rename column rm 1 to rm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lwb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lwb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lwb 1",
    "expression": "grel:value + cells[\"lwb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lwb 1 using expression grel:value + cells[\"lwb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lwb 2",
    "description": "Remove column lwb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lwb 1",
    "newColumnName": "lwb",
    "description": "Rename column lwb 1 to lwb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ldm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column ldm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "ldm 1",
    "expression": "grel:value + cells[\"ldm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column ldm 1 using expression grel:value + cells[\"ldm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "ldm 2",
    "description": "Remove column ldm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "ldm 1",
    "newColumnName": "ldm",
    "description": "Rename column ldm 1 to ldm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cdm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column cdm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cdm 1",
    "expression": "grel:value + cells[\"cdm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cdm 1 using expression grel:value + cells[\"cdm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "cdm 2",
    "description": "Remove column cdm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "cdm 1",
    "newColumnName": "cdm",
    "description": "Rename column cdm 1 to cdm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rdm",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rdm by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rdm 1",
    "expression": "grel:value + cells[\"rdm 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rdm 1 using expression grel:value + cells[\"rdm 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rdm 2",
    "description": "Remove column rdm 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rdm 1",
    "newColumnName": "rdm",
    "description": "Rename column rdm 1 to rdm"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rwb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rwb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rwb 1",
    "expression": "grel:value + cells[\"rwb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rwb 1 using expression grel:value + cells[\"rwb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rwb 2",
    "description": "Remove column rwb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rwb 1",
    "newColumnName": "rwb",
    "description": "Rename column rwb 1 to rwb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lb 1",
    "expression": "grel:value + cells[\"lb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lb 1 using expression grel:value + cells[\"lb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lb 2",
    "description": "Remove column lb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lb 1",
    "newColumnName": "lb",
    "description": "Rename column lb 1 to lb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column lcb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "lcb 1",
    "expression": "grel:value + cells[\"lcb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column lcb 1 using expression grel:value + cells[\"lcb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "lcb 2",
    "description": "Remove column lcb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "lcb 1",
    "newColumnName": "lcb",
    "description": "Rename column lcb 1 to lcb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column cb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "cb 1",
    "expression": "grel:value + cells[\"cb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column cb 1 using expression grel:value + cells[\"cb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "cb 2",
    "description": "Remove column cb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "cb 1",
    "newColumnName": "cb",
    "description": "Rename column cb 1 to cb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rcb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rcb 1",
    "expression": "grel:value + cells[\"rcb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rcb 1 using expression grel:value + cells[\"rcb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rcb 2",
    "description": "Remove column rcb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rcb 1",
    "newColumnName": "rcb",
    "description": "Rename column rcb 1 to rcb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rb",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column rb by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "rb 1",
    "expression": "grel:value + cells[\"rb 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column rb 1 using expression grel:value + cells[\"rb 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "rb 2",
    "description": "Remove column rb 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "rb 1",
    "newColumnName": "rb",
    "description": "Rename column rb 1 to rb"
  },
  {
    "op": "core/column-split",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "gk",
    "guessCellType": true,
    "removeOriginalColumn": true,
    "mode": "separator",
    "separator": "+",
    "regex": false,
    "maxColumns": 0,
    "description": "Split column gk by separator"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "gk 1",
    "expression": "grel:value + cells[\"gk 2\"].value",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column gk 1 using expression grel:value + cells[\"gk 2\"].value"
  },
  {
    "op": "core/column-removal",
    "columnName": "gk 2",
    "description": "Remove column gk 2"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "gk 1",
    "newColumnName": "gk",
    "description": "Rename column gk 1 to gk"
  },
  {
    "op": "core/text-transform",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "club_name",
    "expression": "join ([coalesce(cells['club_name'].value,''),coalesce(cells['member of sports team'].value,'')],'')",
    "onError": "keep-original",
    "repeat": false,
    "repeatCount": 10,
    "description": "Text transform on cells in column club_name using expression join ([coalesce(cells['club_name'].value,''),coalesce(cells['member of sports team'].value,'')],'')"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q26887310",
        "name": "association football team season"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column member of sports team to type Q26887310"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Manchester City W.F.C.",
    "judgment": "matched",
    "match": {
      "id": "Q3844288",
      "name": "Manchester City W.F.C.",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Manchester City W.F.C. (Q3844288) for cells containing \"Manchester City W.F.C.\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Olympique Lyonnais Féminin",
    "judgment": "matched",
    "match": {
      "id": "Q1276685",
      "name": "Olympique Lyonnais Féminin",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Olympique Lyonnais Féminin (Q1276685) for cells containing \"Olympique Lyonnais Féminin\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Arsenal W.F.C.",
    "judgment": "matched",
    "match": {
      "id": "Q1775265",
      "name": "Arsenal W.F.C.",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Arsenal W.F.C. (Q1775265) for cells containing \"Arsenal W.F.C.\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Perth Glory FC W-League",
    "judgment": "matched",
    "match": {
      "id": "Q7170853",
      "name": "Perth Glory FC W-League",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Perth Glory FC W-League (Q7170853) for cells containing \"Perth Glory FC W-League\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "United States women's national soccer team",
    "judgment": "matched",
    "match": {
      "id": "Q334526",
      "name": "United States women's national soccer team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item United States women's national soccer team (Q334526) for cells containing \"United States women's national soccer team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "1. FFC Frankfurt",
    "judgment": "matched",
    "match": {
      "id": "Q162449",
      "name": "1. FFC Frankfurt",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item 1. FFC Frankfurt (Q162449) for cells containing \"1. FFC Frankfurt\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Portland Thorns FC",
    "judgment": "matched",
    "match": {
      "id": "Q1446672",
      "name": "Portland Thorns FC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Portland Thorns FC (Q1446672) for cells containing \"Portland Thorns FC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "VfL Wolfsburg Women",
    "judgment": "matched",
    "match": {
      "id": "Q285131",
      "name": "VfL Wolfsburg Women",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item VfL Wolfsburg Women (Q285131) for cells containing \"VfL Wolfsburg Women\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Chicago Red Stars",
    "judgment": "matched",
    "match": {
      "id": "Q1071986",
      "name": "Chicago Red Stars",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Chicago Red Stars (Q1071986) for cells containing \"Chicago Red Stars\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Gold Pride",
    "judgment": "matched",
    "match": {
      "id": "Q612387",
      "name": "FC Gold Pride",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Gold Pride (Q612387) for cells containing \"FC Gold Pride\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "SC Heerenveen Vrouwen",
    "judgment": "matched",
    "match": {
      "id": "Q276848",
      "name": "SC Heerenveen Vrouwen",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item SC Heerenveen Vrouwen (Q276848) for cells containing \"SC Heerenveen Vrouwen\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Kansas City",
    "judgment": "matched",
    "match": {
      "id": "Q3276051",
      "name": "FC Kansas City",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Kansas City (Q3276051) for cells containing \"FC Kansas City\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Chelsea F.C. Women",
    "judgment": "matched",
    "match": {
      "id": "Q2422811",
      "name": "Chelsea F.C. Women",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Chelsea F.C. Women (Q2422811) for cells containing \"Chelsea F.C. Women\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Atlético de Madrid Femenino",
    "judgment": "matched",
    "match": {
      "id": "Q4816984",
      "name": "Atlético de Madrid Femenino",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Atlético de Madrid Femenino (Q4816984) for cells containing \"Atlético de Madrid Femenino\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Bayern Munich Women",
    "judgment": "matched",
    "match": {
      "id": "Q540384",
      "name": "FC Bayern Munich Women",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Bayern Munich Women (Q540384) for cells containing \"FC Bayern Munich Women\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Rosengård",
    "judgment": "matched",
    "match": {
      "id": "Q1807026",
      "name": "FC Rosengård",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Rosengård (Q1807026) for cells containing \"FC Rosengård\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "NJ/NY Gotham FC",
    "judgment": "matched",
    "match": {
      "id": "Q1447181",
      "name": "NJ/NY Gotham FC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item NJ/NY Gotham FC (Q1447181) for cells containing \"NJ/NY Gotham FC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Hammarby IF DFF",
    "judgment": "matched",
    "match": {
      "id": "Q2643852",
      "name": "Hammarby IF DFF",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Hammarby IF DFF (Q2643852) for cells containing \"Hammarby IF DFF\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "RCD Espanyol Femenino",
    "judgment": "matched",
    "match": {
      "id": "Q592748",
      "name": "RCD Espanyol Femenino",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item RCD Espanyol Femenino (Q592748) for cells containing \"RCD Espanyol Femenino\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "United States women's national under-20 soccer team",
    "judgment": "matched",
    "match": {
      "id": "Q1671357",
      "name": "United States women's national under-20 soccer team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item United States women's national under-20 soccer team (Q1671357) for cells containing \"United States women's national under-20 soccer team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "SGS Essen",
    "judgment": "matched",
    "match": {
      "id": "Q121968",
      "name": "SGS Essen",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item SGS Essen (Q121968) for cells containing \"SGS Essen\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Linköpings FC",
    "judgment": "matched",
    "match": {
      "id": "Q1826908",
      "name": "Linköpings FC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Linköpings FC (Q1826908) for cells containing \"Linköpings FC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "SC Freiburg",
    "judgment": "matched",
    "match": {
      "id": "Q820739",
      "name": "SC Freiburg",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item SC Freiburg (Q820739) for cells containing \"SC Freiburg\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Western New York Flash",
    "judgment": "matched",
    "match": {
      "id": "Q28169542",
      "name": "North Carolina Courage",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item North Carolina Courage (Q28169542) for cells containing \"Western New York Flash\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "PSV Vrouwen",
    "judgment": "matched",
    "match": {
      "id": "Q1874991",
      "name": "PSV Vrouwen",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item PSV Vrouwen (Q1874991) for cells containing \"PSV Vrouwen\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Toronto Lady Lynx",
    "judgment": "matched",
    "match": {
      "id": "Q16844147",
      "name": "Toronto Lady Lynx",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Toronto Lady Lynx (Q16844147) for cells containing \"Toronto Lady Lynx\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FCF Juvisy",
    "judgment": "matched",
    "match": {
      "id": "Q492372",
      "name": "FCF Juvisy",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FCF Juvisy (Q492372) for cells containing \"FCF Juvisy\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FSV Gütersloh 2009",
    "judgment": "matched",
    "match": {
      "id": "Q1389635",
      "name": "FSV Gütersloh 2009",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FSV Gütersloh 2009 (Q1389635) for cells containing \"FSV Gütersloh 2009\" in column member of sports team"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "same_as_wikidata_Id",
    "newColumnName": "same_as_wikidata_id",
    "description": "Rename column same_as_wikidata_Id to same_as_wikidata_id"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Östers IF",
    "judgment": "matched",
    "match": {
      "id": "Q33024869",
      "name": "Växjö DFF",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Växjö DFF (Q33024869) for cells containing \"Östers IF\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "BK Häcken FF",
    "judgment": "matched",
    "match": {
      "id": "Q1337348",
      "name": "BK Häcken FF",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item BK Häcken FF (Q1337348) for cells containing \"BK Häcken FF\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Athletic Club Femenino",
    "judgment": "matched",
    "match": {
      "id": "Q780121",
      "name": "Athletic Club Femenino",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Athletic Club Femenino (Q780121) for cells containing \"Athletic Club Femenino\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "1. FFC Turbine Potsdam",
    "judgment": "matched",
    "match": {
      "id": "Q162450",
      "name": "1. FFC Turbine Potsdam",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item 1. FFC Turbine Potsdam (Q162450) for cells containing \"1. FFC Turbine Potsdam\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Vancouver Whitecaps",
    "judgment": "matched",
    "match": {
      "id": "Q2008499",
      "name": "Vancouver Whitecaps",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Vancouver Whitecaps (Q2008499) for cells containing \"Vancouver Whitecaps\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Paris Saint-Germain Féminine",
    "judgment": "matched",
    "match": {
      "id": "Q3365295",
      "name": "Paris Saint-Germain Féminine",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Paris Saint-Germain Féminine (Q3365295) for cells containing \"Paris Saint-Germain Féminine\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Sejong Sportstoto WFC",
    "judgment": "matched",
    "match": {
      "id": "Q5116368",
      "name": "Sejong Sportstoto WFC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Sejong Sportstoto WFC (Q5116368) for cells containing \"Sejong Sportstoto WFC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "New South Wales Institute of Sport",
    "judgment": "matched",
    "match": {
      "id": "Q1982903",
      "name": "New South Wales Institute of Sport",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item New South Wales Institute of Sport (Q1982903) for cells containing \"New South Wales Institute of Sport\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Melbourne City FC W-League",
    "judgment": "matched",
    "match": {
      "id": "Q20127927",
      "name": "Melbourne City FC W-League",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Melbourne City FC W-League (Q20127927) for cells containing \"Melbourne City FC W-League\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Lincoln Ladies F.C.",
    "judgment": "matched",
    "match": {
      "id": "Q55625528",
      "name": "Notts County Women F.C.",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Notts County Women F.C. (Q55625528) for cells containing \"Lincoln Ladies F.C.\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "SC 07 Bad Neuenahr",
    "judgment": "matched",
    "match": {
      "id": "Q485813",
      "name": "SC 07 Bad Neuenahr",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item SC 07 Bad Neuenahr (Q485813) for cells containing \"SC 07 Bad Neuenahr\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "LSK Kvinner FK",
    "judgment": "matched",
    "match": {
      "id": "Q634434",
      "name": "LSK Kvinner FK",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item LSK Kvinner FK (Q634434) for cells containing \"LSK Kvinner FK\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Twente",
    "judgment": "matched",
    "match": {
      "id": "Q1387774",
      "name": "FC Twente",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Twente (Q1387774) for cells containing \"FC Twente\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Adelaide United FC W-League",
    "judgment": "matched",
    "match": {
      "id": "Q15632679",
      "name": "Adelaide United FC W-League",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Adelaide United FC W-League (Q15632679) for cells containing \"Adelaide United FC W-League\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Doncaster Rovers Belles L.F.C.",
    "judgment": "matched",
    "match": {
      "id": "Q3124611",
      "name": "Doncaster Rovers Belles L.F.C.",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Doncaster Rovers Belles L.F.C. (Q3124611) for cells containing \"Doncaster Rovers Belles L.F.C.\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Bayer 04 Leverkusen Women",
    "judgment": "matched",
    "match": {
      "id": "Q812128",
      "name": "Bayer 04 Leverkusen Women",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Bayer 04 Leverkusen Women (Q812128) for cells containing \"Bayer 04 Leverkusen Women\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Western Sydney Wanderers FC W-League",
    "judgment": "matched",
    "match": {
      "id": "Q7988367",
      "name": "Western Sydney Wanderers FC W-League",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Western Sydney Wanderers FC W-League (Q7988367) for cells containing \"Western Sydney Wanderers FC W-League\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Røa IL",
    "judgment": "matched",
    "match": {
      "id": "Q10659202",
      "name": "Røa IL",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Røa IL (Q10659202) for cells containing \"Røa IL\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Canberra United FC",
    "judgment": "matched",
    "match": {
      "id": "Q2936203",
      "name": "Canberra United FC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Canberra United FC (Q2936203) for cells containing \"Canberra United FC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "FC Barcelona Femení",
    "judgment": "matched",
    "match": {
      "id": "Q522899",
      "name": "FC Barcelona Femení",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item FC Barcelona Femení (Q522899) for cells containing \"FC Barcelona Femení\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Brisbane Roar FC",
    "judgment": "matched",
    "match": {
      "id": "Q15635028",
      "name": "Brisbane Roar FC W-League",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Brisbane Roar FC W-League (Q15635028) for cells containing \"Brisbane Roar FC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Germany women's national under-15 football team",
    "judgment": "matched",
    "match": {
      "id": "Q154408",
      "name": "Germany women's national football team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Germany women's national football team (Q154408) for cells containing \"Germany women's national under-15 football team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Spain women's national football team",
    "judgment": "matched",
    "match": {
      "id": "Q847623",
      "name": "Spain women's national football team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Spain women's national football team (Q847623) for cells containing \"Spain women's national football team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Sweden women's national association football team",
    "judgment": "matched",
    "match": {
      "id": "Q726066",
      "name": "Sweden women's national association football team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Sweden women's national association football team (Q726066) for cells containing \"Sweden women's national association football team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "China women's national football team",
    "judgment": "matched",
    "match": {
      "id": "Q756037",
      "name": "China women's national football team",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item China women's national football team (Q756037) for cells containing \"China women's national football team\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Liverpool F.C. Women",
    "judgment": "matched",
    "match": {
      "id": "Q588085",
      "name": "Liverpool F.C. Women",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Liverpool F.C. Women (Q588085) for cells containing \"Liverpool F.C. Women\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Sunderland Association Football Club Ladies",
    "judgment": "matched",
    "match": {
      "id": "Q7639686",
      "name": "Sunderland Association Football Club Ladies",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Sunderland Association Football Club Ladies (Q7639686) for cells containing \"Sunderland Association Football Club Ladies\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Leeds United L.F.C.",
    "judgment": "matched",
    "match": {
      "id": "Q3106835",
      "name": "Leeds United L.F.C.",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Leeds United L.F.C. (Q3106835) for cells containing \"Leeds United L.F.C.\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Houston Dash",
    "judgment": "matched",
    "match": {
      "id": "Q15303416",
      "name": "Houston Dash",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Houston Dash (Q15303416) for cells containing \"Houston Dash\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Piteå IF",
    "judgment": "matched",
    "match": {
      "id": "Q7198914",
      "name": "Piteå IF",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Piteå IF (Q7198914) for cells containing \"Piteå IF\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "Montpellier HSC",
    "judgment": "matched",
    "match": {
      "id": "Q3085161",
      "name": "Montpellier HSC",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item Montpellier HSC (Q3085161) for cells containing \"Montpellier HSC\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "SC Telstar VVNH",
    "judgment": "matched",
    "match": {
      "id": "Q2177715",
      "name": "SC Telstar VVNH",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item SC Telstar VVNH (Q2177715) for cells containing \"SC Telstar VVNH\" in column member of sports team"
  },
  {
    "op": "core/recon-judge-similar-cells",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "member of sports team",
    "similarValue": "ADO Den Haag Vrouwen",
    "judgment": "matched",
    "match": {
      "id": "Q290489",
      "name": "ADO Den Haag Vrouwen",
      "types": [
        ""
      ],
      "score": 100
    },
    "shareNewTopics": false,
    "description": "Match item ADO Den Haag Vrouwen (Q290489) for cells containing \"ADO Den Haag Vrouwen\" in column member of sports team"
  },
  {
    "op": "core/fill-down",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "club_name",
    "description": "Fill down cells in column club_name"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "club_name",
    "expression": "grel:value",
    "onError": "set-to-blank",
    "newColumnName": "reconciliation_league",
    "columnInsertIndex": 17,
    "description": "Create column reconciliation_league at index 17 based on column club_name using expression grel:value"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "reconciliation_league",
    "newColumnName": "reconciliation_club",
    "description": "Rename column reconciliation_league to reconciliation_club"
  },
  {
    "op": "core/recon",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "columnName": "reconciliation_club",
    "config": {
      "mode": "standard-service",
      "service": "https://wikidata.reconci.link/en/api",
      "identifierSpace": "http://www.wikidata.org/entity/",
      "schemaSpace": "http://www.wikidata.org/prop/direct/",
      "type": {
        "id": "Q51481377",
        "name": "women's association football club"
      },
      "autoMatch": true,
      "columnDetails": [],
      "limit": 0
    },
    "description": "Reconcile cells in column reconciliation_club to type Q51481377"
  },
  {
    "op": "core/extend-reconciled-data",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "reconciliation_club",
    "endpoint": "https://wikidata.reconci.link/en/api",
    "identifierSpace": "http://www.wikidata.org/entity/",
    "schemaSpace": "http://www.wikidata.org/prop/direct/",
    "extension": {
      "properties": [
        {
          "id": "P118",
          "name": null
        }
      ]
    },
    "columnInsertIndex": 18,
    "description": "Extend data at index 18 based on column reconciliation_club"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "league",
    "toColumnNames": [
      "league_name"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column league to league_name"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "league_name",
    "toColumnNames": [
      "league"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column league_name to league"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "member of sports team",
    "toColumnNames": [
      "club_name"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": true,
    "description": "Copy recon judgments from column member of sports team to club_name"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "league",
    "toColumnNames": [
      "league_name"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": false,
    "description": "Copy recon judgments from column league to league_name"
  },
  {
    "op": "core/recon-copy-across-columns",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "fromColumnName": "league_name",
    "toColumnNames": [
      "league"
    ],
    "judgments": [
      "new",
      "matched"
    ],
    "applyToJudgedCells": false,
    "description": "Copy recon judgments from column league_name to league"
  },
  {
    "op": "core/column-removal",
    "columnName": "same_as_wikidata_id",
    "description": "Remove column same_as_wikidata_id"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "reconciliation_wikidata",
    "newColumnName": "reconciliation_player",
    "description": "Rename column reconciliation_wikidata to reconciliation_player"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [
        {
          "type": "list",
          "name": "member of sports team: judgment",
          "expression": "forNonBlank(cell.recon.judgment, v, v, if(isNonBlank(value), \"(unreconciled)\", \"(blank)\"))",
          "columnName": "member of sports team",
          "invert": false,
          "omitBlank": false,
          "omitError": false,
          "selection": [
            {
              "v": {
                "v": "none",
                "l": "none"
              }
            }
          ],
          "selectBlank": false,
          "selectError": false
        }
      ],
      "mode": "row-based"
    },
    "baseColumnName": "reconciliation_player",
    "expression": "grel:'http://www.wikidata.org/entity/' + cell.recon.match.id",
    "onError": "set-to-blank",
    "newColumnName": "wikidata_player",
    "columnInsertIndex": 5,
    "description": "Create column wikidata_player at index 5 based on column reconciliation_player using expression grel:'http://www.wikidata.org/entity/' + cell.recon.match.id"
  },
  {
    "op": "core/column-addition",
    "engineConfig": {
      "facets": [],
      "mode": "row-based"
    },
    "baseColumnName": "reconciliation_player",
    "expression": "grel:'http://www.wikidata.org/entity/' + cell.recon.match.id",
    "onError": "set-to-blank",
    "newColumnName": "wikidata_player1",
    "columnInsertIndex": 5,
    "description": "Create column wikidata_player1 at index 5 based on column reconciliation_player using expression grel:'http://www.wikidata.org/entity/' + cell.recon.match.id"
  },
  {
    "op": "core/column-removal",
    "columnName": "wikidata_player",
    "description": "Remove column wikidata_player"
  },
  {
    "op": "core/column-rename",
    "oldColumnName": "wikidata_player1",
    "newColumnName": "wikidata_player",
    "description": "Rename column wikidata_player1 to wikidata_player"
  }
]